{
  "Description": "Infrastructure CI-CD quick start (qs-1rcmkurut)",
  "Parameters": {
    "IdeStackTemplateURL": {
      "Type": "String",
      "Description": "IDE stack CloudFormation template S3 URL parameter"
    }
  },
  "Resources": {
    "CloudFormationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudformation.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloud9:DeleteEnvironment",
                    "cloud9:DescribeEnvironments"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:cloud9:${AWS::Region}:${AWS::AccountId}:environment:*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DeleteDocument",
                    "ssm:DescribeDocument",
                    "ssm:GetDocument"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:AddPermission",
                    "sns:CheckIfPhoneNumberIsOptedOut",
                    "sns:ConfirmSubscription",
                    "sns:CreatePlatformApplication",
                    "sns:CreatePlatformEndpoint",
                    "sns:CreateSMSSandboxPhoneNumber",
                    "sns:CreateTopic",
                    "sns:DeleteEndpoint",
                    "sns:DeletePlatformApplication",
                    "sns:DeleteSMSSandboxPhoneNumber",
                    "sns:DeleteTopic",
                    "sns:GetEndpointAttributes",
                    "sns:GetPlatformApplicationAttributes",
                    "sns:GetSMSAttributes",
                    "sns:GetSMSSandboxAccountStatus",
                    "sns:GetSubscriptionAttributes",
                    "sns:GetTopicAttributes",
                    "sns:ListEndpointsByPlatformApplication",
                    "sns:ListOriginationNumbers",
                    "sns:ListPhoneNumbersOptedOut",
                    "sns:ListPlatformApplications",
                    "sns:ListSMSSandboxPhoneNumbers",
                    "sns:ListSubscriptions",
                    "sns:ListSubscriptionsByTopic",
                    "sns:ListTagsForResource",
                    "sns:ListTopics",
                    "sns:OptInPhoneNumber",
                    "sns:Publish",
                    "sns:RemovePermission",
                    "sns:SetEndpointAttributes",
                    "sns:SetPlatformApplicationAttributes",
                    "sns:SetSMSAttributes",
                    "sns:SetSubscriptionAttributes",
                    "sns:SetTopicAttributes",
                    "sns:Subscribe",
                    "sns:TagResource",
                    "sns:Unsubscribe",
                    "sns:UntagResource",
                    "sns:VerifySMSSandboxPhoneNumber"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:BypassGovernanceRetention",
                    "s3:CreateAccessPoint",
                    "s3:CreateAccessPointForObjectLambda",
                    "s3:CreateBucket",
                    "s3:CreateJob",
                    "s3:DeleteAccessPoint",
                    "s3:DeleteAccessPointForObjectLambda",
                    "s3:DeleteAccessPointPolicy",
                    "s3:DeleteAccessPointPolicyForObjectLambda",
                    "s3:DeleteBucket",
                    "s3:DeleteBucketOwnershipControls",
                    "s3:DeleteBucketPolicy",
                    "s3:DeleteBucketWebsite",
                    "s3:DeleteJobTagging",
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:DeleteObjectVersion",
                    "s3:DeleteObjectVersionTagging",
                    "s3:DeleteStorageLensConfiguration",
                    "s3:DeleteStorageLensConfigurationTagging",
                    "s3:DescribeJob",
                    "s3:GetAccelerateConfiguration",
                    "s3:GetAccessPoint",
                    "s3:GetAccessPointConfigurationForObjectLambda",
                    "s3:GetAccessPointForObjectLambda",
                    "s3:GetAccessPointPolicy",
                    "s3:GetAccessPointPolicyForObjectLambda",
                    "s3:GetAccessPointPolicyStatus",
                    "s3:GetAccessPointPolicyStatusForObjectLambda",
                    "s3:GetAccountPublicAccessBlock",
                    "s3:GetAnalyticsConfiguration",
                    "s3:GetBucketAcl",
                    "s3:GetBucketCORS",
                    "s3:GetBucketLocation",
                    "s3:GetBucketLogging",
                    "s3:GetBucketNotification",
                    "s3:GetBucketObjectLockConfiguration",
                    "s3:GetBucketOwnershipControls",
                    "s3:GetBucketPolicy",
                    "s3:GetBucketPolicyStatus",
                    "s3:GetBucketPublicAccessBlock",
                    "s3:GetBucketRequestPayment",
                    "s3:GetBucketTagging",
                    "s3:GetBucketVersioning",
                    "s3:GetBucketWebsite",
                    "s3:GetEncryptionConfiguration",
                    "s3:GetIntelligentTieringConfiguration",
                    "s3:GetInventoryConfiguration",
                    "s3:GetJobTagging",
                    "s3:GetLifecycleConfiguration",
                    "s3:GetMetricsConfiguration",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectLegalHold",
                    "s3:GetObjectRetention",
                    "s3:GetObjectTagging",
                    "s3:GetObjectTorrent",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionAcl",
                    "s3:GetObjectVersionForReplication",
                    "s3:GetObjectVersionTagging",
                    "s3:GetObjectVersionTorrent",
                    "s3:GetReplicationConfiguration",
                    "s3:GetStorageLensConfiguration",
                    "s3:GetStorageLensConfigurationTagging",
                    "s3:GetStorageLensDashboard",
                    "s3:ListAccessPoints",
                    "s3:ListAccessPointsForObjectLambda",
                    "s3:ListAllMyBuckets",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListBucketVersions",
                    "s3:ListJobs",
                    "s3:ListMultipartUploadParts",
                    "s3:ListStorageLensConfigurations",
                    "s3:ObjectOwnerOverrideToBucketOwner",
                    "s3:PutAccelerateConfiguration",
                    "s3:PutAccessPointConfigurationForObjectLambda",
                    "s3:PutAccessPointPolicy",
                    "s3:PutAccessPointPolicyForObjectLambda",
                    "s3:PutAccountPublicAccessBlock",
                    "s3:PutAnalyticsConfiguration",
                    "s3:PutBucketAcl",
                    "s3:PutBucketCORS",
                    "s3:PutBucketLogging",
                    "s3:PutBucketNotification",
                    "s3:PutBucketObjectLockConfiguration",
                    "s3:PutBucketOwnershipControls",
                    "s3:PutBucketPolicy",
                    "s3:PutBucketPublicAccessBlock",
                    "s3:PutBucketRequestPayment",
                    "s3:PutBucketTagging",
                    "s3:PutBucketVersioning",
                    "s3:PutBucketWebsite",
                    "s3:PutEncryptionConfiguration",
                    "s3:PutIntelligentTieringConfiguration",
                    "s3:PutInventoryConfiguration",
                    "s3:PutJobTagging",
                    "s3:PutLifecycleConfiguration",
                    "s3:PutMetricsConfiguration",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectLegalHold",
                    "s3:PutObjectRetention",
                    "s3:PutObjectTagging",
                    "s3:PutObjectVersionAcl",
                    "s3:PutObjectVersionTagging",
                    "s3:PutReplicationConfiguration",
                    "s3:PutStorageLensConfiguration",
                    "s3:PutStorageLensConfigurationTagging",
                    "s3:ReplicateDelete",
                    "s3:ReplicateObject",
                    "s3:ReplicateTags",
                    "s3:RestoreObject",
                    "s3:UpdateJobPriority",
                    "s3:UpdateJobStatus"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:s3:::*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:s3:::*/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:AddLayerVersionPermission",
                    "lambda:AddPermission",
                    "lambda:CreateAlias",
                    "lambda:CreateCodeSigningConfig",
                    "lambda:CreateEventSourceMapping",
                    "lambda:CreateFunction",
                    "lambda:DeleteAlias",
                    "lambda:DeleteCodeSigningConfig",
                    "lambda:DeleteEventSourceMapping",
                    "lambda:DeleteFunction",
                    "lambda:DeleteFunctionCodeSigningConfig",
                    "lambda:DeleteFunctionConcurrency",
                    "lambda:DeleteFunctionEventInvokeConfig",
                    "lambda:DeleteLayerVersion",
                    "lambda:DeleteProvisionedConcurrencyConfig",
                    "lambda:DisableReplication",
                    "lambda:EnableReplication",
                    "lambda:GetAccountSettings",
                    "lambda:GetAlias",
                    "lambda:GetCodeSigningConfig",
                    "lambda:GetEventSourceMapping",
                    "lambda:GetFunction",
                    "lambda:GetFunctionCodeSigningConfig",
                    "lambda:GetFunctionConcurrency",
                    "lambda:GetFunctionConfiguration",
                    "lambda:GetFunctionEventInvokeConfig",
                    "lambda:GetLayerVersion",
                    "lambda:GetLayerVersionPolicy",
                    "lambda:GetPolicy",
                    "lambda:GetProvisionedConcurrencyConfig",
                    "lambda:InvokeAsync",
                    "lambda:InvokeFunction",
                    "lambda:ListAliases",
                    "lambda:ListCodeSigningConfigs",
                    "lambda:ListEventSourceMappings",
                    "lambda:ListFunctionEventInvokeConfigs",
                    "lambda:ListFunctions",
                    "lambda:ListFunctionsByCodeSigningConfig",
                    "lambda:ListLayerVersions",
                    "lambda:ListLayers",
                    "lambda:ListProvisionedConcurrencyConfigs",
                    "lambda:ListTags",
                    "lambda:ListVersionsByFunction",
                    "lambda:PublishLayerVersion",
                    "lambda:PublishVersion",
                    "lambda:PutFunctionCodeSigningConfig",
                    "lambda:PutFunctionConcurrency",
                    "lambda:PutFunctionEventInvokeConfig",
                    "lambda:PutProvisionedConcurrencyConfig",
                    "lambda:RemoveLayerVersionPermission",
                    "lambda:RemovePermission",
                    "lambda:TagResource",
                    "lambda:UntagResource",
                    "lambda:UpdateAlias",
                    "lambda:UpdateCodeSigningConfig",
                    "lambda:UpdateEventSourceMapping",
                    "lambda:UpdateFunctionCode",
                    "lambda:UpdateFunctionCodeSigningConfig",
                    "lambda:UpdateFunctionConfiguration",
                    "lambda:UpdateFunctionEventInvokeConfig"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:code-signing-config:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*:*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:AddClientIDToOpenIDConnectProvider",
                    "iam:AddRoleToInstanceProfile",
                    "iam:AddUserToGroup",
                    "iam:AttachGroupPolicy",
                    "iam:AttachRolePolicy",
                    "iam:AttachUserPolicy",
                    "iam:ChangePassword",
                    "iam:CreateAccessKey",
                    "iam:CreateAccountAlias",
                    "iam:CreateGroup",
                    "iam:CreateInstanceProfile",
                    "iam:CreateLoginProfile",
                    "iam:CreateOpenIDConnectProvider",
                    "iam:CreatePolicy",
                    "iam:CreatePolicyVersion",
                    "iam:CreateRole",
                    "iam:CreateSAMLProvider",
                    "iam:CreateServiceLinkedRole",
                    "iam:CreateServiceSpecificCredential",
                    "iam:CreateUser",
                    "iam:CreateVirtualMFADevice",
                    "iam:DeactivateMFADevice",
                    "iam:DeleteAccessKey",
                    "iam:DeleteAccountAlias",
                    "iam:DeleteAccountPasswordPolicy",
                    "iam:DeleteGroup",
                    "iam:DeleteGroupPolicy",
                    "iam:DeleteInstanceProfile",
                    "iam:DeleteLoginProfile",
                    "iam:DeleteOpenIDConnectProvider",
                    "iam:DeletePolicy",
                    "iam:DeletePolicyVersion",
                    "iam:DeleteRole",
                    "iam:DeleteRolePermissionsBoundary",
                    "iam:DeleteRolePolicy",
                    "iam:DeleteSAMLProvider",
                    "iam:DeleteSSHPublicKey",
                    "iam:DeleteServerCertificate",
                    "iam:DeleteServiceLinkedRole",
                    "iam:DeleteServiceSpecificCredential",
                    "iam:DeleteSigningCertificate",
                    "iam:DeleteUser",
                    "iam:DeleteUserPermissionsBoundary",
                    "iam:DeleteUserPolicy",
                    "iam:DeleteVirtualMFADevice",
                    "iam:DetachGroupPolicy",
                    "iam:DetachRolePolicy",
                    "iam:DetachUserPolicy",
                    "iam:EnableMFADevice",
                    "iam:GenerateCredentialReport",
                    "iam:GenerateOrganizationsAccessReport",
                    "iam:GenerateServiceLastAccessedDetails",
                    "iam:GetAccessKeyLastUsed",
                    "iam:GetAccountAuthorizationDetails",
                    "iam:GetAccountPasswordPolicy",
                    "iam:GetAccountSummary",
                    "iam:GetContextKeysForCustomPolicy",
                    "iam:GetContextKeysForPrincipalPolicy",
                    "iam:GetCredentialReport",
                    "iam:GetGroup",
                    "iam:GetGroupPolicy",
                    "iam:GetInstanceProfile",
                    "iam:GetLoginProfile",
                    "iam:GetOpenIDConnectProvider",
                    "iam:GetOrganizationsAccessReport",
                    "iam:GetPolicy",
                    "iam:GetPolicyVersion",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "iam:GetSAMLProvider",
                    "iam:GetSSHPublicKey",
                    "iam:GetServerCertificate",
                    "iam:GetServiceLastAccessedDetails",
                    "iam:GetServiceLastAccessedDetailsWithEntities",
                    "iam:GetServiceLinkedRoleDeletionStatus",
                    "iam:GetUser",
                    "iam:GetUserPolicy",
                    "iam:ListAccessKeys",
                    "iam:ListAccountAliases",
                    "iam:ListAttachedGroupPolicies",
                    "iam:ListAttachedRolePolicies",
                    "iam:ListAttachedUserPolicies",
                    "iam:ListEntitiesForPolicy",
                    "iam:ListGroupPolicies",
                    "iam:ListGroups",
                    "iam:ListGroupsForUser",
                    "iam:ListInstanceProfileTags",
                    "iam:ListInstanceProfiles",
                    "iam:ListInstanceProfilesForRole",
                    "iam:ListMFADeviceTags",
                    "iam:ListMFADevices",
                    "iam:ListOpenIDConnectProviderTags",
                    "iam:ListOpenIDConnectProviders",
                    "iam:ListPolicies",
                    "iam:ListPoliciesGrantingServiceAccess",
                    "iam:ListPolicyTags",
                    "iam:ListPolicyVersions",
                    "iam:ListRolePolicies",
                    "iam:ListRoleTags",
                    "iam:ListRoles",
                    "iam:ListSAMLProviderTags",
                    "iam:ListSAMLProviders",
                    "iam:ListSSHPublicKeys",
                    "iam:ListServerCertificateTags",
                    "iam:ListServerCertificates",
                    "iam:ListServiceSpecificCredentials",
                    "iam:ListSigningCertificates",
                    "iam:ListUserPolicies",
                    "iam:ListUserTags",
                    "iam:ListUsers",
                    "iam:ListVirtualMFADevices",
                    "iam:PassRole",
                    "iam:PutGroupPolicy",
                    "iam:PutRolePermissionsBoundary",
                    "iam:PutRolePolicy",
                    "iam:PutUserPermissionsBoundary",
                    "iam:PutUserPolicy",
                    "iam:RemoveClientIDFromOpenIDConnectProvider",
                    "iam:RemoveRoleFromInstanceProfile",
                    "iam:RemoveUserFromGroup",
                    "iam:ResetServiceSpecificCredential",
                    "iam:ResyncMFADevice",
                    "iam:SetDefaultPolicyVersion",
                    "iam:SetSecurityTokenServicePreferences",
                    "iam:SimulateCustomPolicy",
                    "iam:SimulatePrincipalPolicy",
                    "iam:TagInstanceProfile",
                    "iam:TagMFADevice",
                    "iam:TagOpenIDConnectProvider",
                    "iam:TagPolicy",
                    "iam:TagRole",
                    "iam:TagSAMLProvider",
                    "iam:TagServerCertificate",
                    "iam:TagUser",
                    "iam:UntagInstanceProfile",
                    "iam:UntagMFADevice",
                    "iam:UntagOpenIDConnectProvider",
                    "iam:UntagPolicy",
                    "iam:UntagRole",
                    "iam:UntagSAMLProvider",
                    "iam:UntagServerCertificate",
                    "iam:UntagUser",
                    "iam:UpdateAccessKey",
                    "iam:UpdateAccountPasswordPolicy",
                    "iam:UpdateAssumeRolePolicy",
                    "iam:UpdateGroup",
                    "iam:UpdateLoginProfile",
                    "iam:UpdateOpenIDConnectProviderThumbprint",
                    "iam:UpdateRole",
                    "iam:UpdateRoleDescription",
                    "iam:UpdateSAMLProvider",
                    "iam:UpdateSSHPublicKey",
                    "iam:UpdateServerCertificate",
                    "iam:UpdateServiceSpecificCredential",
                    "iam:UpdateSigningCertificate",
                    "iam:UpdateUser",
                    "iam:UploadSSHPublicKey",
                    "iam:UploadServerCertificate",
                    "iam:UploadSigningCertificate"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:access-report/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:group/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:mfa/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:saml-provider/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:ActivateEventSource",
                    "events:CancelReplay",
                    "events:CreateApiDestination",
                    "events:CreateArchive",
                    "events:CreateConnection",
                    "events:CreateEventBus",
                    "events:CreatePartnerEventSource",
                    "events:DeactivateEventSource",
                    "events:DeauthorizeConnection",
                    "events:DeleteApiDestination",
                    "events:DeleteArchive",
                    "events:DeleteConnection",
                    "events:DeleteEventBus",
                    "events:DeletePartnerEventSource",
                    "events:DeleteRule",
                    "events:DescribeApiDestination",
                    "events:DescribeArchive",
                    "events:DescribeConnection",
                    "events:DescribeEventBus",
                    "events:DescribeEventSource",
                    "events:DescribePartnerEventSource",
                    "events:DescribeReplay",
                    "events:DescribeRule",
                    "events:DisableRule",
                    "events:EnableRule",
                    "events:InvokeApiDestination",
                    "events:ListApiDestinations",
                    "events:ListArchives",
                    "events:ListConnections",
                    "events:ListEventBuses",
                    "events:ListEventSources",
                    "events:ListPartnerEventSourceAccounts",
                    "events:ListPartnerEventSources",
                    "events:ListReplays",
                    "events:ListRuleNamesByTarget",
                    "events:ListRules",
                    "events:ListTagsForResource",
                    "events:ListTargetsByRule",
                    "events:PutEvents",
                    "events:PutPartnerEvents",
                    "events:PutPermission",
                    "events:PutRule",
                    "events:PutTargets",
                    "events:RemovePermission",
                    "events:RemoveTargets",
                    "events:StartReplay",
                    "events:TagResource",
                    "events:TestEventPattern",
                    "events:UntagResource",
                    "events:UpdateApiDestination",
                    "events:UpdateArchive",
                    "events:UpdateConnection"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:api-destination/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:archive/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:connection/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}::event-source/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:replay/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codepipeline:AcknowledgeJob",
                    "codepipeline:AcknowledgeThirdPartyJob",
                    "codepipeline:CreateCustomActionType",
                    "codepipeline:CreatePipeline",
                    "codepipeline:DeleteCustomActionType",
                    "codepipeline:DeletePipeline",
                    "codepipeline:DeleteWebhook",
                    "codepipeline:DeregisterWebhookWithThirdParty",
                    "codepipeline:DisableStageTransition",
                    "codepipeline:EnableStageTransition",
                    "codepipeline:GetJobDetails",
                    "codepipeline:GetPipeline",
                    "codepipeline:GetPipelineExecution",
                    "codepipeline:GetPipelineState",
                    "codepipeline:GetThirdPartyJobDetails",
                    "codepipeline:ListActionExecutions",
                    "codepipeline:ListActionTypes",
                    "codepipeline:ListPipelineExecutions",
                    "codepipeline:ListPipelines",
                    "codepipeline:ListTagsForResource",
                    "codepipeline:ListWebhooks",
                    "codepipeline:PollForJobs",
                    "codepipeline:PollForThirdPartyJobs",
                    "codepipeline:PutActionRevision",
                    "codepipeline:PutApprovalResult",
                    "codepipeline:PutJobFailureResult",
                    "codepipeline:PutJobSuccessResult",
                    "codepipeline:PutThirdPartyJobFailureResult",
                    "codepipeline:PutThirdPartyJobSuccessResult",
                    "codepipeline:PutWebhook",
                    "codepipeline:RegisterWebhookWithThirdParty",
                    "codepipeline:RetryStageExecution",
                    "codepipeline:StartPipelineExecution",
                    "codepipeline:StopPipelineExecution",
                    "codepipeline:TagResource",
                    "codepipeline:UntagResource",
                    "codepipeline:UpdatePipeline"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*/*/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:actiontype:*/*/*/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:webhook:*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:BatchDeleteBuilds",
                    "codebuild:BatchGetBuildBatches",
                    "codebuild:BatchGetBuilds",
                    "codebuild:BatchGetProjects",
                    "codebuild:BatchGetReportGroups",
                    "codebuild:BatchGetReports",
                    "codebuild:BatchPutCodeCoverages",
                    "codebuild:BatchPutTestCases",
                    "codebuild:CreateProject",
                    "codebuild:CreateReport",
                    "codebuild:CreateReportGroup",
                    "codebuild:CreateWebhook",
                    "codebuild:DeleteBuildBatch",
                    "codebuild:DeleteOAuthToken",
                    "codebuild:DeleteProject",
                    "codebuild:DeleteReport",
                    "codebuild:DeleteReportGroup",
                    "codebuild:DeleteResourcePolicy",
                    "codebuild:DeleteSourceCredentials",
                    "codebuild:DeleteWebhook",
                    "codebuild:DescribeCodeCoverages",
                    "codebuild:DescribeTestCases",
                    "codebuild:GetReportGroupTrend",
                    "codebuild:GetResourcePolicy",
                    "codebuild:ImportSourceCredentials",
                    "codebuild:InvalidateProjectCache",
                    "codebuild:ListBuildBatches",
                    "codebuild:ListBuildBatchesForProject",
                    "codebuild:ListBuilds",
                    "codebuild:ListBuildsForProject",
                    "codebuild:ListConnectedOAuthAccounts",
                    "codebuild:ListCuratedEnvironmentImages",
                    "codebuild:ListProjects",
                    "codebuild:ListReportGroups",
                    "codebuild:ListReports",
                    "codebuild:ListReportsForReportGroup",
                    "codebuild:ListRepositories",
                    "codebuild:ListSharedProjects",
                    "codebuild:ListSharedReportGroups",
                    "codebuild:ListSourceCredentials",
                    "codebuild:PersistOAuthToken",
                    "codebuild:PutResourcePolicy",
                    "codebuild:RetryBuild",
                    "codebuild:RetryBuildBatch",
                    "codebuild:StartBuild",
                    "codebuild:StartBuildBatch",
                    "codebuild:StopBuild",
                    "codebuild:StopBuildBatch",
                    "codebuild:UpdateProject",
                    "codebuild:UpdateReport",
                    "codebuild:UpdateReportGroup",
                    "codebuild:UpdateWebhook"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:AssociateApprovalRuleTemplateWithRepository",
                    "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
                    "codecommit:BatchDescribeMergeConflicts",
                    "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
                    "codecommit:BatchGetCommits",
                    "codecommit:BatchGetPullRequests",
                    "codecommit:BatchGetRepositories",
                    "codecommit:CancelUploadArchive",
                    "codecommit:CreateApprovalRuleTemplate",
                    "codecommit:CreateBranch",
                    "codecommit:CreateCommit",
                    "codecommit:CreatePullRequest",
                    "codecommit:CreatePullRequestApprovalRule",
                    "codecommit:CreateRepository",
                    "codecommit:CreateUnreferencedMergeCommit",
                    "codecommit:DeleteApprovalRuleTemplate",
                    "codecommit:DeleteBranch",
                    "codecommit:DeleteCommentContent",
                    "codecommit:DeleteFile",
                    "codecommit:DeletePullRequestApprovalRule",
                    "codecommit:DeleteRepository",
                    "codecommit:DescribeMergeConflicts",
                    "codecommit:DescribePullRequestEvents",
                    "codecommit:DisassociateApprovalRuleTemplateFromRepository",
                    "codecommit:EvaluatePullRequestApprovalRules",
                    "codecommit:GetApprovalRuleTemplate",
                    "codecommit:GetBlob",
                    "codecommit:GetBranch",
                    "codecommit:GetComment",
                    "codecommit:GetCommentReactions",
                    "codecommit:GetCommentsForComparedCommit",
                    "codecommit:GetCommentsForPullRequest",
                    "codecommit:GetCommit",
                    "codecommit:GetCommitHistory",
                    "codecommit:GetCommitsFromMergeBase",
                    "codecommit:GetDifferences",
                    "codecommit:GetFile",
                    "codecommit:GetFolder",
                    "codecommit:GetMergeCommit",
                    "codecommit:GetMergeConflicts",
                    "codecommit:GetMergeOptions",
                    "codecommit:GetObjectIdentifier",
                    "codecommit:GetPullRequest",
                    "codecommit:GetPullRequestApprovalStates",
                    "codecommit:GetPullRequestOverrideState",
                    "codecommit:GetReferences",
                    "codecommit:GetRepository",
                    "codecommit:GetRepositoryTriggers",
                    "codecommit:GetTree",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:GitPull",
                    "codecommit:GitPush",
                    "codecommit:ListApprovalRuleTemplates",
                    "codecommit:ListAssociatedApprovalRuleTemplatesForRepository",
                    "codecommit:ListBranches",
                    "codecommit:ListPullRequests",
                    "codecommit:ListRepositories",
                    "codecommit:ListRepositoriesForApprovalRuleTemplate",
                    "codecommit:ListTagsForResource",
                    "codecommit:MergeBranchesByFastForward",
                    "codecommit:MergeBranchesBySquash",
                    "codecommit:MergeBranchesByThreeWay",
                    "codecommit:MergePullRequestByFastForward",
                    "codecommit:MergePullRequestBySquash",
                    "codecommit:MergePullRequestByThreeWay",
                    "codecommit:OverridePullRequestApprovalRules",
                    "codecommit:PostCommentForComparedCommit",
                    "codecommit:PostCommentForPullRequest",
                    "codecommit:PostCommentReply",
                    "codecommit:PutCommentReaction",
                    "codecommit:PutFile",
                    "codecommit:PutRepositoryTriggers",
                    "codecommit:TagResource",
                    "codecommit:TestRepositoryTriggers",
                    "codecommit:UntagResource",
                    "codecommit:UpdateApprovalRuleTemplateContent",
                    "codecommit:UpdateApprovalRuleTemplateDescription",
                    "codecommit:UpdateApprovalRuleTemplateName",
                    "codecommit:UpdateComment",
                    "codecommit:UpdateDefaultBranch",
                    "codecommit:UpdatePullRequestApprovalRuleContent",
                    "codecommit:UpdatePullRequestApprovalState",
                    "codecommit:UpdatePullRequestDescription",
                    "codecommit:UpdatePullRequestStatus",
                    "codecommit:UpdatePullRequestTitle",
                    "codecommit:UpdateRepositoryDescription",
                    "codecommit:UpdateRepositoryName",
                    "codecommit:UploadArchive"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:*"}
                }
              ]
            },
            "PolicyName": "root"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/CloudFormationRole"
      }
    },
    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "AbortIncompleteMultipartUpload": {
                "DaysAfterInitiation": 30
              },
              "NoncurrentVersionExpirationInDays": 90,
              "NoncurrentVersionTransitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ],
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Bucket"
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AssociateIamInstanceProfile",
                    "ec2:RebootInstances"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:SendCommand"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:*:${AWS::Region}:${AWS::AccountId}:*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteObject",
                    "s3:DeleteObjectVersion",
                    "s3:ListBucketVersions",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:${AWS::Partition}:s3:::*"},
                    {"Fn::Sub": "arn:${AWS::Partition}:s3:::*/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "ssm:DescribeInstanceInformation"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "root"
          }
        ]
      },
      "DependsOn": [
        "CloudFormationRole"
      ],
      "Metadata": {
        "aws:cdk:path": "quickstart/LambdaRole"
      }
    },
    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, shutil, urllib3, zipfile\n\nhttp = urllib3.PoolManager()\n\nGITHUB_ACCOUNT_NAME = 'aws-quickstart'\nGITHUB_REPOSITORY_NAME = 'quickstart-shi-crpm'\n\ndef lambda_handler(event, context):\n    print('Event:', event['RequestType'])\n    \n    artifact_bucket_name = event['ResourceProperties']['ArtifactBucketName']\n    print('Artifact Bucket Name:', artifact_bucket_name)\n    \n    empty_bucket_on_delete = event['ResourceProperties']['EmptyBucketOnDelete']\n    print('Empty Bucket On Delete:', empty_bucket_on_delete)\n    \n    if (event['RequestType'] == 'Create'):\n        try:\n            with http.request('GET', 'https://codeload.github.com/{}/{}/zip/main'.format(GITHUB_ACCOUNT_NAME, GITHUB_REPOSITORY_NAME), preload_content=False) as res, open('/tmp/source.zip', 'wb') as out_file:\n                shutil.copyfileobj(res, out_file)\n            \n            with zipfile.ZipFile('/tmp/source.zip', 'r') as zf:\n                zf.extractall('/tmp')\n            \n            shutil.make_archive('/tmp/source2', 'zip', '/tmp/{}-main'.format(GITHUB_REPOSITORY_NAME))\n            \n            s3 = boto3.client('s3')\n            with open('/tmp/source2.zip', 'rb') as f:\n                s3.upload_fileobj(f, artifact_bucket_name, 'quick-start/Source/{}.zip'.format(GITHUB_REPOSITORY_NAME))\n            \n            print('Copied quick start source from GitHub to S3')\n            return send(event, context, 'SUCCESS')\n        except:\n            return send(event, context, 'FAILED', 'Could not copy quick start source from GitHub to S3')\n    elif (event['RequestType'] == 'Delete' and empty_bucket_on_delete):\n        try:\n            client = boto3.client('s3')\n            paginator = client.get_paginator('list_object_versions')\n            response_iterator = paginator.paginate(Bucket=artifact_bucket_name)\n            for response in response_iterator:\n                versions = response.get('Versions', [])\n                versions.extend(response.get('DeleteMarkers', []))\n                for key, version_id in [[v['Key'], v['VersionId']] for v in versions]:\n                    client.delete_object(Bucket=artifact_bucket_name, Key=key, VersionId=version_id)\n        except:\n            return send(event, context, 'FAILED', 'Could not empty bucket')\n    \n    send(event, context, 'SUCCESS')\n\ndef send(event, context, status, data=''):\n    body = {\n        'Status': status,\n        'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n        'PhysicalResourceId': context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n        'NoEcho': False,\n        'Data': {'Data': data}\n    }\n    \n    json_body = json.dumps(body)\n    \n    headers = {\n        'content-type': '',\n        'content-length': str(len(json_body))\n    }\n    \n    http.request('PUT', event['ResponseURL'], body=json_body, headers=headers)\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Description": "Clones the Quick Start source code and saves it in an S3 artifact bucket on creation, and empties the bucket on deletion",
        "Handler": "index.lambda_handler",
        "Runtime": "python3.6",
        "Timeout": 300
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Function"
      }
    },
    "CustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "ArtifactBucketName": {
          "Ref": "Bucket"
        },
        "EmptyBucketOnDelete": true
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/CustomResource"
      }
    },
    "Repository": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties": {
        "RepositoryName": {
          "Ref": "AWS::StackName"
        },
        "Code": {
          "S3": {
            "Bucket": {
              "Ref": "Bucket"
            },
            "Key": "quick-start/Source/quickstart-shi-crpm.zip"
          }
        },
        "RepositoryDescription": "Infrastructure repository created by an AWS Quick Start."
      },
      "DependsOn": [
        "CustomResource"
      ],
      "Metadata": {
        "aws:cdk:path": "quickstart/Repository"
      }
    },
    "CodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:s3:::*/*"},
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"},
                  "Effect": "Allow"
                }
              ]
            },
            "PolicyName": "root"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/CodeBuildRole"
      }
    },
    "Project": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": [
            {
              "Name": "IDE_STACK_TEMPLATE_URL",
              "Value": {
                "Ref": "IdeStackTemplateURL"
              }
            }
          ],
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "Type": "LINUX_CONTAINER"
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "CodeBuildRole",
            "Arn"
          ]
        },
        "Source": {
          "Type": "CODEPIPELINE"
        },
        "Description": "Build CloudFormation templates"
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Project"
      }
    },
    "CodePipelineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DeleteStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:SetStackPolicy",
                    "cloudformation:ValidateTemplate"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:BatchGetBuilds",
                    "codebuild:StartBuild"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:UploadArchive",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:CancelUploadArchive"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:s3:::*/*"}
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*"}
                }
              ]
            },
            "PolicyName": "root"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/CodePipelineRole"
      }
    },
    "Pipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": [
            "CodePipelineRole",
            "Arn"
          ]
        },
        "Stages": [
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "CodeCommit",
                  "Version": "1"
                },
                "Configuration": {
                  "BranchName": "main",
                  "PollForSourceChanges": "false",
                  "RepositoryName": {
                    "Fn::GetAtt": [
                      "Repository",
                      "Name"
                    ]
                  }
                },
                "Name": "Fetch",
                "OutputArtifacts": [
                  {
                    "Name": "Source"
                  }
                ]
              }
            ],
            "Name": "Source"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "Project"
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "Source"
                  }
                ],
                "Name": "SynthesizeAndTest",
                "OutputArtifacts": [
                  {
                    "Name": "Package"
                  }
                ]
              }
            ],
            "Name": "Build"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "CloudFormation",
                  "Version": "1"
                },
                "Configuration": {
                  "ActionMode": "CHANGE_SET_REPLACE",
                  "Capabilities": "CAPABILITY_IAM,CAPABILITY_NAMED_IAM",
                  "ChangeSetName": "pipeline",
                  "OutputFileName": "create-change-set/pipeline.json",
                  "TemplatePath": "Package::cdk.out/quickstart.template.json",
                  "ParameterOverrides": {
                    "Fn::Join": [
                      "",
                      [
                        "{\"IdeStackTemplateURL\": \"",
                        {
                          "Ref": "IdeStackTemplateURL"
                        },
                        "\"}"
                      ]
                    ]
                  },
                  "RoleArn": {
                    "Fn::GetAtt": [
                      "CloudFormationRole",
                      "Arn"
                    ]
                  },
                  "StackName": {
                    "Ref": "AWS::StackName"
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "Package"
                  }
                ],
                "Name": "ReplaceChangeSet",
                "RunOrder": 1
              },
              {
                "ActionTypeId": {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Provider": "Manual",
                  "Version": "1"
                },
                "Name": "Approve",
                "RunOrder": 2
              }
            ],
            "Name": "Review"
          },
          {
            "Actions": [
              {
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "CloudFormation",
                  "Version": "1"
                },
                "Configuration": {
                  "ActionMode": "CHANGE_SET_EXECUTE",
                  "Capabilities": "CAPABILITY_IAM,CAPABILITY_NAMED_IAM",
                  "ChangeSetName": "pipeline",
                  "OutputFileName": "execute-change-set/pipeline.json",
                  "TemplatePath": "Package::cdk.out/quickstart.template.json",
                  "ParameterOverrides": {
                    "Fn::Join": [
                      "",
                      [
                        "{\"IdeStackTemplateURL\": \"",
                        {
                          "Ref": "IdeStackTemplateURL"
                        },
                        "\"}"
                      ]
                    ]
                  },
                  "RoleArn": {
                    "Fn::GetAtt": [
                      "CloudFormationRole",
                      "Arn"
                    ]
                  },
                  "StackName": {
                    "Ref": "AWS::StackName"
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "Package"
                  }
                ],
                "Name": "ExecuteChangeSet"
              }
            ],
            "Name": "Deploy"
          }
        ],
        "ArtifactStore": {
          "Location": {
            "Ref": "Bucket"
          },
          "Type": "S3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Pipeline"
      }
    },
    "EventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "codepipeline:StartPipelineExecution",
                  "Resource": {"Fn::Sub": "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*"}
                }
              ]
            },
            "PolicyName": "root"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/EventsRole"
      }
    },
    "Rule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Triggers a pipeline to update the current infrastructure to match the current main branch.",
        "EventPattern": {
          "source": [
            "aws.codecommit"
          ],
          "detail-type": [
            "CodeCommit Repository State Change"
          ],
          "detail": {
            "referenceType": [
              "branch"
            ],
            "referenceName": [
              "main"
            ]
          },
          "resources": [
            {
              "Fn::GetAtt": [
                "Repository",
                "Arn"
              ]
            }
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:codepipeline:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "Pipeline"
                  }
                ]
              ]
            },
            "Id": "codepipeline",
            "RoleArn": {
              "Fn::GetAtt": [
                "EventsRole",
                "Arn"
              ]
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Rule"
      }
    },
    "Stack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Ref": "IdeStackTemplateURL"
        },
        "Parameters": {
          "RepoName": {
            "Fn::GetAtt": [
              "Repository",
              "Name"
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/Stack"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAAA02QwW7DMAiGn2V312069T6t0q6ruidwMZVIbBPZ0GmK8u4N3g478fMBP4jBD8PJH17ewnfbQZz2C3BFv3xJgMmd7+USasgoWC35VJlV3JlLk6ogxq7YWCug6a0QSYjL6sxvoZC9tXBC115NvitMKC6FfIvBwIcWsAkHiTXeueZgqV/MTptw/r+gn7U64IjAOZN0e5y5kXD96YWbUorGL5VH3I40ONOMiQp2/qcdPrBI6xaacF1d2Tr92PaP4eCPx+0tYyPaVS1CGf31Nz4BNYo/2zMBAAA="
      },
      "Metadata": {
        "aws:cdk:path": "quickstart/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "CodeCommitURL": {
      "Value": {
        "Fn::GetAtt": [
          "Repository",
          "CloneUrlHttp"
        ]
      }
    },
    "CodePipelineName": {
      "Value": {
        "Ref": "Pipeline"
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  }
}